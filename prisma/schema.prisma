// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isOnline      Boolean   @default(false)
  lastSeen      DateTime  @default(now())

  accounts      Account[]
  sessions      Session[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  conversationsInitiated Conversation[] @relation("UserOne")
  conversationsReceived  Conversation[] @relation("UserTwo")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String   @id @default(cuid())
  userOneId String
  userTwoId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userOne   User     @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwo   User     @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@unique([userOneId, userTwoId])
}

model Message {
  id             String   @id @default(cuid())
  content        String
  senderId       String
  receiverId     String
  conversationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isRead         Boolean  @default(false)
  readAt         DateTime?

  sender      User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
